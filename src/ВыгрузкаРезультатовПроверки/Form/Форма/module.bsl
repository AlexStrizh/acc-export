
#Область ОбработчикиСобытийФормы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Порядок чтения параметров
	// Файл параметров берется из аргумента, если не указан, то ищется рядом с обработкой
	// Параметры читаются из аргументов, если не указаны, то из файла параметров
	
	ПутьКФайлуПараметров = "";
	
	Аргументы = СтрРазделить( ПараметрЗапуска, ";", Ложь );
	файлОбработки = Новый Файл( ИспользуемоеИмяФайла );
	
	// Предположим, что это не пакетный запуск
	Если Аргументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ЗаполнитьПараметр( цАргумент, "acc.propertiesPaths", ПутьКФайлуПараметров );
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено( ПутьКФайлуПараметров ) Тогда
		
		ПутьКФайлуПараметров = файлОбработки.Путь + "acc.properties";
		
	КонецЕсли;
	
	ПрочитатьФайлПараметров( ПутьКФайлуПараметров );
	
	Для каждого цАргумент Из Аргументы Цикл
		
		ПрочитатьПараметрыВСтроке(цАргумент);
		
	КонецЦикла;
	
	ОбеспечитьАбсолютныйПутьККаталогу( файлОбработки.Путь );

	ПостОбработкаПараметров();

	Если ЗначениеЗаполнено( Конфигурация )
		И ЗначениеЗаполнено( КаталогПроекта ) Тогда
		
		ЗапускПроверки();
		ИнициализироватьПервичныеДанные();
		ЭкспортироватьОшибкиАПК();
		
	КонецЕсли;
	
	// Обработка предазначена для пакетного режима.
	// Для отладки следующую строку стоит закомментировать
	ЗавершитьРаботуСистемы( Ложь, Ложь );
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ФорматЭкспорта = ФорматЭкспортаReportJSON;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	ЗапускПроверки();
	ИнициализироватьПервичныеДанные();
	ЭкспортироватьОшибкиАПК();
	
КонецПроцедуры

Процедура КаталогПроектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	// перевести в немодальное
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выбор каталога проекта";
	Если Диалог.Выбрать() Тогда
		КаталогПроекта = Диалог.Каталог + "\";	
	КонецЕсли;
	
КонецПроцедуры

Процедура ФорматЭкспортаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПрочитатьФайлПараметров(Знач ПутьКФайлуПараметров)
	
	Сообщить( СтрШаблон( "Читаю файл параметров %1", ПутьКФайлуПараметров ) );
	
	файлПараметров = Новый Файл( ПутьКФайлуПараметров );
	
	Если Не файлПараметров.Существует() Тогда
		Сообщить( СтрШаблон( "Файл параметров %1 не найден.", ПутьКФайлуПараметров ) );
		Возврат;
	КонецЕсли;
	
	чтениеФайлаПараметров = Новый ТекстовыйДокумент;
	чтениеФайлаПараметров.Прочитать( файлПараметров.ПолноеИмя, КодировкаТекста.UTF8 );
	
	Для ц = 0 По чтениеФайлаПараметров.КоличествоСтрок() Цикл
		
		текСтрока = чтениеФайлаПараметров.ПолучитьСтроку( ц );
		
		ПрочитатьПараметрыВСтроке( текСтрока );
		
	КонецЦикла;
	
	чтениеФайлаПараметров = Неопределено;
	
	ОбеспечитьАбсолютныйПутьККаталогу(файлПараметров.Путь);
	
КонецПроцедуры

Процедура ОбеспечитьАбсолютныйПутьККаталогу(Знач КаталогРодитель)
	
	Если Не ЗначениеЗаполнено( КаталогПроекта ) Тогда
		Возврат;
	КонецЕсли;
	
	Сообщить( СтрШаблон( "Вычисление пути к исходникам. Текущий путь = %1, каталог-родитель = %2", КаталогПроекта, КаталогРодитель ) );
	
	Если Не СтрНачинаетсяС( КаталогПроекта, "." ) Тогда
		
		каталог = Новый Файл( КаталогПроекта );
		
		Если каталог.ЭтоКаталог()
			И каталог.Существует() Тогда
			
			// каталог найден и существует
			
			Сообщить( СтрШаблон( "Текущий путь = %1", КаталогПроекта ) );
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено( КаталогРодитель ) Тогда
		Возврат;
	КонецЕсли;
		
	каталог = Новый Файл( КаталогРодитель + ПолучитьРазделительПути() + КаталогПроекта );
	
	Сообщить( СтрШаблон( "Вычисление по родителю = %1", каталог.ПолноеИмя ) );
	
	Если каталог.ЭтоКаталог()
		И каталог.Существует() Тогда
		
		// каталог найден и существует
		
		КаталогПроекта = каталог.ПолноеИмя;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьПараметрыВСтроке(Знач СтрокаСПараметром)
	
	ЗаполнитьПараметр( СтрокаСПараметром, "acc.projectKey", ИмяПроекта );
	ЗаполнитьПараметр( СтрокаСПараметром, "acc.sources", КаталогПроекта );
	ЗаполнитьПараметр( СтрокаСПараметром, "acc.check", ЗначениеПараметра_ВыполнятьПроверку );

КонецПроцедуры

Процедура ЗаполнитьПараметр( Знач СтрокаПараметра , Знач ИмяПараметра, ЗначениеПараметра )
	
	текСтрокаВРег = ВРег( СтрокаПараметра );
	
	Если Не СтрНачинаетсяС( текСтрокаВРег, ВРег( ИмяПараметра ) ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	позРавно = СтрНайти( СтрокаПараметра, "=" );
	
	Если позРавно = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЗначениеПараметра = СокрЛП( Сред( СтрокаПараметра, позРавно + 1 ) );
	
	Сообщить( "Найден параметр " + ИмяПараметра + " = " + ЗначениеПараметра );
	
КонецПроцедуры

Процедура ПостОбработкаПараметров()
	
	Если ЗначениеЗаполнено( ИмяПроекта ) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Конфигурации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Конфигурации КАК Конфигурации
		|ГДЕ
		|	Конфигурации.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", ИмяПроекта );
		
		выборка = Запрос.Выполнить().Выбрать();
		
		Если выборка.Следующий() Тогда
			
			Конфигурация = выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено( КаталогПроекта )
		И Не СтрЗаканчиваетсяНа( КаталогПроекта, ПолучитьРазделительПути() ) Тогда
		
		КаталогПроекта = КаталогПроекта + ПолучитьРазделительПути();
		
	КонецЕсли;
	
	ЗначениеПараметра_ВыполнятьПроверку = ВРег( ЗначениеПараметра_ВыполнятьПроверку );
	
	ВыполнятьПроверку = ЗначениеПараметра_ВыполнятьПроверку = "TRUE" ИЛИ ЗначениеПараметра_ВыполнятьПроверку = "1" ИЛИ ЗначениеПараметра_ВыполнятьПроверку = "ИСТИНА";
	
	Сообщить( "Имя проекта = " + ИмяПроекта );
	Сообщить( "Конфигурация = " + Конфигурация + ", код: " + Конфигурация.Код );
	Сообщить( "Каталог исходников = " + КаталогПроекта );
	Сообщить( "Выполнять проверку = " + ВыполнятьПроверку );

КонецПроцедуры

Процедура ЗапускПроверки()
	
	Если Не ВыполнятьПроверку
		ИЛИ Не ЗначениеЗаполнено( Конфигурация ) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Сообщить( "Начало проверки конфигурации " + ТекущаяДата() );
	
	ФормаЗапускаПроверки = ПолучитьФорму("Обработка.ЗапускПроверки.Форма");
	ФормаЗапускаПроверки.Конфигурация = Конфигурация;
	ФормаЗапускаПроверки.ФлагПроверкаПоРасписанию = Истина;
	ФормаЗапускаПроверки.ВариантПроверкиПоРасписанию = Конфигурация.ВариантПроверкиПоРасписанию;
	ФормаЗапускаПроверки.РегистрироватьВсеОшибкиКакОсобенности = Конфигурация.РегистрироватьВсеОшибкиКакОсобенностиПоРасписанию;
	
	ФормаЗапускаПроверки.Открыть();
	ФормаЗапускаПроверки.ВыполнитьПроверку();
	ФормаЗапускаПроверки.Закрыть();
	
	Сообщить( "Окончание проверки конфигурации " + ТекущаяДата() );

КонецПроцедуры

#КонецОбласти